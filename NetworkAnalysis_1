#Codes for Data Camp course on Network analysis using R

Creating an igraph object
Here you will learn how to create an igraph 'object' from data stored in an edgelist. The data are friendships in a group of students. You will also learn how to make a basic visualization of the network.

Each row of the friends dataframe represents an edge in the network.

Instructions
Inspect the first few rows of the dataframe friends using the function head().
Create new object friends.mat from the dataframe friends using as.matrix().
Convert variable to an igraph object g using graph.edgelist().
Make a basic plot of the network using plot().


```{r}

#Loading required files
friends =read.csv(file="C://Users//sudha.sundaram//Documents//R//datasets//friends.csv")

# Load igraph
library(igraph)

# Inspect the first few rows of the dataframe 'friends'
head(friends)

# Convert friends dataframe to a matrix
friends.mat <- as.matrix(friends)

# Convert friends matrix to an igraph object
g <- graph.edgelist(friends.mat, directed = FALSE)


# Make a very basic plot of the network
plot(g)


```

Counting vertices and edges
A lot of basic information about a network can be extracted from an igraph object. In this exercise you will learn how to count the vertices and edges from a network by applying several functions to the graph object g.

Each row of the friends dataframe represents an edge in the network.

Instructions
Use V() and E() to view the vertices and edges respectively of the network.
Use gsize() to count the number of edges in a network.
Use gorder() to count the number of vertices in a network.


```{r}

# Load igraph
library(igraph)

# Subset vertices and edges
V(g)
E(g)

# Count number of edges
gsize(g)

# Count number of vertices
gorder(g)

```

Node attributes and subsetting
In this exercise you will learn how to add attributes to vertices in the network and view them.

Instructions
Create a new vertex attribute called 'gender' from the vector genders using set_vertex_attr().
Create a new vertex attribute called 'age' from the vector ages using set_vertex_attr().
View all vertex attributes using vertex_attr().
View the attributes of the first five vertices in a dataframe using V(g)[[]].


```{r}

library(igraph)

# Inspect the objects 'genders' and 'ages'
genders
ages

# Create new vertex attribute called 'gender'
g <- set_vertex_attr(g, "gender", value = genders)

# Create new vertex attribute called 'age'
g <- set_vertex_attr(g, "age", value = ages)

# View all vertex attributes in a list
vertex_attr(g)

# View attributes of first five vertices in a dataframe
V(g)[[1:5]] 


```

Edge attributes and subsetting
In this exercise you will learn how to add attributes to edges in the network and view them. For instance, we will add the attribute 'hours' that represents how many hours per week each pair of friends spend with each other.

Instructions
Create a new edge attribute called 'hours' from the vector hours using set_edge_attr().
View all edge attributes using edge_attr().
View all edges that include the person "Britt".
View all edges where the attribute hours is greater than or equal to 4 hours.


```{r}

library(igraph)

# View hours
hours

# Create new edge attribute called 'hours'
g <- set_edge_attr(g, "hours", value = hours)

# View edge attributes of graph object
edge_attr(g)

# Find all edges that include "Britt"
E(g)[[inc('Britt')]]  

# Find all pairs that spend 4 or more hours together per week
E(g)[[hours>=4]]  

```

Visualizing attributes
In this exercise we will learn how to create igraph objects with attributes directly from dataframes and how to visualize attributes in plots. We will use a second network of friendship connections between students.

Instructions
Create a new igraph object with graph_from_data_frame(). Two dataframes need to be provided - friends1_edges contains all edges in the network with attributes and friends1_nodes contains all vertices in the network with attributes.
View all edges where the attribute hours is greater than or equal to 5 hours.
Create a new vertex attribute containing color names: orange for females and dodgerblue for males.
Plot the network with vertices colored by gender and make label names black.


```{r}
friends1_edges=read.csv(file="C://Users//sudha.sundaram//Documents//R//datasets//friends1_edges.csv")
friends1_nodes=read.csv(file="C://Users//sudha.sundaram//Documents//R//datasets//friends1_nodes.csv")

library(igraph)

# Create an igraph object with attributes directly from dataframes
g1 <- graph_from_data_frame(d = friends1_edges, vertices = friends1_nodes, directed = FALSE)


# Subset edges greater than or equal to 5 hours
E(g1)[[hours>=5]]  

# Plot network and color vertices by gender
V(g1)$color <- ifelse(V(g1)$gender == "F", "orange", "dodgerblue")
plot(g1, vertex.label.color = "black")




```

igraph network layouts
The igraph package provides several built in layout algorithms for network visualization. Depending upon the size of a given network different layouts may be more effective in communicating the structure of the network. Ideally the best layout is the one that minimizes the number of edges that cross each other in the network. In this exercise you will explore just a few of the many default layout algorithms. Re-executing the code for each plot will lead to a slightly different version of the same layout type. Doing this a few times can help to find the best looking visualization for your network.

Instructions
In the plot function, change the layout argument to layout_in_circle() to produce a circle network.
In the plot function, change the layout argument to layout_with_fr() to produce a network with the Fruchterman-Reingold layout.
You can also stipulate the layout by providing a matrix of (x, y) coordinates for each vertex. Here you use the layout_as_tree() function to generate the matrix m of coordinates. Then pass m to the layout function in plot() to plot.
Choosing a correct layout can be bewildering. Fortunately igraph has a function layout_nicely() that tries to choose the most appropriate layout function for a given graph object. Use this function to produce the matrix m1 and plot the network using these coordinates.

```{r}

library(igraph)

# Plot the graph object g1 in a circle layout
plot(g1, vertex.label.color = "black", layout = layout_in_circle(g1))

# Plot the graph object g1 in a Fruchterman-Reingold layout 
plot(g1, vertex.label.color = "black", layout = layout_with_fr(g1))

# Plot the graph object g1 in a Tree layout 
m <- layout_as_tree(g1)
plot(g1, vertex.label.color = "black", layout = m)

# Plot the graph object g1 using igraph's chosen layout 
m1 <- layout_nicely(g1)
plot(g1, vertex.label.color = "black", layout = m1)

```

