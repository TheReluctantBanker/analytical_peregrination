---
title: "Untitled"
author: "Sudha"
date: "January 9, 2018"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

##Notes
Equality

The most basic form of comparison is equality. Let's briefly recap its syntax. The following statements all evaluate to TRUE (feel free to try them out in the console).

3 == (2 + 1)
"intermediate" != "r"
TRUE != FALSE
"Rchitect" != "rchitect"
Notice from the last expression that R is case sensitive: "R" is not equal to "r". Keep this in mind when solving the exercises in this chapter!

##Instructions
In the editor on the right, write R code to see if TRUE equals FALSE.
Likewise, check if -6 * 14 is not equal to 17 - 101.
Next up: comparison of character strings. Ask R whether the strings "useR" and "user" are equal.
Finally, find out what happens if you compare logicals to numerics: are TRUE and 1 equal?

##Code 

```{r}
# Comparison of logicals
TRUE==FALSE

# Comparison of numerics
-6*14 != 17-101

# Comparison of character strings
"useR" =="user"

# Compare a logical with a numeric
TRUE==1

```

##Notes
Greater and less than

Apart from equality operators, Filip also introduced the less than and greater than operators: < and >. You can also add an equal sign to express less than or equal to or greater than or equal to, respectively. Have a look at the following R expressions, that all evaluate to FALSE:

(1 + 2) > 4
"dog" < "Cats"
TRUE <= FALSE
Remember that for string comparison, R determines the greater than relationship based on alphabetical order. Also, keep in mind that TRUE corresponds to 1 in R, and FALSE coerces to 0 behind the scenes. Therefore, FALSE < TRUE is TRUE.

##Instructions
Write R expressions to check whether:

-6 * 5 + 2 is greater than or equal to -10 + 1.
"raining" is less than or equal to "raining dogs".
TRUE is greater than FALSE.

##Code

```{r}
# Comparison of numerics
-6*5+2 >= -10+1

# Comparison of character strings
"raining" <="raining dogs"

# Comparison of logicals
TRUE > FALSE

```

##Notes
Compare vectors

You are already aware that R is very good with vectors. Without having to change anything about the syntax, R's relational operators also work on vectors.

Let's go back to the example that was started in the video. You want to figure out whether your activity on social media platforms have paid off and decide to look at your results for LinkedIn and Facebook. The sample code in the editor initializes the vectors linkedin and facebook. Each of the vectors contains the number of profile views your LinkedIn and Facebook profiles had over the last seven days.

##Instructions
Using relational operators, find a logical answer, i.e. TRUE or FALSE, for the following questions:

On which days did the number of LinkedIn profile views exceed 15?
When was your LinkedIn profile viewed only 5 times or fewer?
When was your LinkedIn profile visited more often than your Facebook profile?

##Code

```{r}
# The linkedin and facebook vectors have already been created for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)

# Popular days
linkedin>15

# Quiet days
linkedin<=5


# LinkedIn more popular than Facebook
linkedin>facebook

```

##Notes
Compare matrices

R's ability to deal with different data structures for comparisons does not stop at vectors. Matrices and relational operators also work together seamlessly!

Instead of in vectors (as in the previous exercise), the LinkedIn and Facebook data is now stored in a matrix called views. The first row contains the LinkedIn information; the second row the Facebook information. The original vectors facebook and linkedin are still available as well.

##Instructions
Using the relational operators you've learned so far, try to discover the following:

When were the views exactly equal to 13? Use the views matrix to return a logical matrix.
For which days were the number of views less than or equal to 14? Again, have R return a logical matrix.

##Code

```{r}
# The social data has been created for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
views <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)

# When does views equal 13?
views==13

# When is views less than or equal to 14?
views<=14
```

##Notes
& and |

Before you work your way through the next exercises, have a look at the following R expressions. All of them will evaluate to TRUE:

TRUE & TRUE
FALSE | TRUE
5 <= 5 & 2 < 3
3 < 4 | 7 < 6
Watch out: 3 < x < 7 to check if x is between 3 and 7 will not work; you'll need 3 < x & x < 7 for that.

In this exercise, you'll be working with the last variable. This variable equals the last value of the linkedin vector that you've worked with previously. The linkedin vector represents the number of LinkedIn views your profile had in the last seven days, remember? Both the variables linkedin and last have already been defined in the editor.

##Instructions
Write R expressions to solve the following questions concerning the variable last:

Is last under 5 or above 10?
Is last between 15 and 20, excluding 15 but including 20?

##Code

```{r}
# The linkedin and last variable are already defined for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
last <- tail(linkedin, 1)

# Is last under 5 or above 10?
last<5 | last>10

# Is last between 15 (exclusive) and 20 (inclusive)?
last >15 & last<=20
```

##Notes
& and | (2)

Like relational operators, logical operators work perfectly fine with vectors and matrices.

Both the vectors linkedin and facebook are available again. Also a matrix - views - has been defined; its first and second row correspond to the linkedin and facebook vectors, respectively. Ready for some advanced queries to gain more insights into your social outreach?

##Instructions
When did LinkedIn views exceed 10 and did Facebook views fail to reach 10 for a particular day? Use the linkedin and facebook vectors.
When were one or both of your LinkedIn and Facebook profiles visited at least 12 times?
When is the views matrix equal to a number between 11 and 14, excluding 11 and including 14?

##Code
```{r}
# The social data (linkedin, facebook, views) has been created for you

# linkedin exceeds 10 but facebook below 10
linkedin>10 & facebook <10

# When were one or both visited at least 12 times?
linkedin >=12  | facebook >=12

# When is views between 11 (exclusive) and 14 (inclusive)?
views>11 & views<=14

```

##Notes
Blend it all together

With the things you've learned by now, you're able to solve pretty cool problems.

Instead of recording the number of views for your own LinkedIn profile, suppose you conducted a survey inside the company you're working for. You've asked every employee with a LinkedIn profile how many visits their profile has had over the past seven days. You stored the results in a data frame called li_df. This data frame is available in the workspace; type li_df in the console to check it out.

##Instructions
Select the entire second column, named day2, from the li_df data frame as a vector and assign it to second.
Use second to create a logical vector, that contains TRUE if the corresponding number of views is strictly greater than 25 or strictly lower than 5 and FALSE otherwise. Store this logical vector as extremes.
Use sum() on the extremes vector to calculate the number of TRUEs in extremes (i.e. to calculate the number of employees that are either very popular or very low-profile). Simply print this number to the console.

##Code

```{r}
# li_df is pre-loaded in your workspace

# Select the second column, named day2, from li_df: second
second =li_df$day2

# Build a logical vector, TRUE if value in second is extreme: extremes
extremes <-(second >25 | second <5)

# Count the number of TRUEs in extremes
sum(extremes)

# Solve it with a one-liner
sum((second >25 | second <5))


```


##Instructions
The if statement

Before diving into some exercises on the if statement, have another look at its syntax:

if (condition) {
  expr
}
Remember your vectors with social profile views? Let's look at it from another angle. The medium variable gives information about the social website; the num_views variable denotes the actual number of views that particular medium had on the last day of your recordings. Both these variables have already been defined in the editor.

##Notes
Examine the if statement that prints out "Showing LinkedIn information" if the medium variable equals "LinkedIn".
Code an if statement that prints "You're popular!" to the console if the num_views variable exceeds 15.

##Code

```{r}
# Variables related to your last day of recordings
medium <- "LinkedIn"
num_views <- 14

# Examine the if statement for medium
if (medium == "LinkedIn") {
  print("Showing LinkedIn information")
}

# Write the if statement for num_views
if( num_views >15)
{
  print("You're popular!")
}


```

##Instructions
Add an else

You can only use an else statement in combination with an if statement. The else statement does not require a condition; its corresponding code is simply run if all of the preceding conditions in the control structure are FALSE. Here's a recipe for its usage:

if (condition) {
  expr1
} else {
  expr2
}
It's important that the else keyword comes on the same line as the closing bracket of the if part!

Both if statements that you coded in the previous exercises are already available in the editor. It's now up to you to extend them with the appropriate else statements!

##Notes
Add an else statement to both control structures, such that

"Unknown medium" gets printed out to the console when the if-condition on medium does not hold.
R prints out "Try to be more visible!" when the if-condition on num_views is not met.

##Code

```{r}
# Variables related to your last day of recordings
medium <- "LinkedIn"
num_views <- 14

# Control structure for medium
if (medium == "LinkedIn") {
  print("Showing LinkedIn information")
} else {
  print("Unknown medium")
}


# Control structure for num_views
if (num_views > 15) {
  print("You're popular!")
} else {
  print("Try to be more visible!")
}
```


##Notes
Customize further: else if

The else if statement allows you to further customize your control structure. You can add as many else if statements as you like. Keep in mind that R ignores the remainder of the control structure once a condition has been found that is TRUE and the corresponding expressions have been executed. Here's an overview of the syntax to freshen your memory:

if (condition1) {
  expr1
} else if (condition2) {
  expr2
} else if (condition3) {
  expr3
} else {
  expr4
}
Again, It's important that the else if keywords comes on the same line as the closing bracket of the previous part of the control construct!

##Instructions
Add code to both control structures such that:

R prints out "Showing Facebook information" if medium is equal to "Facebook". Remember that R is case sensitive!
"Your number of views is average" is printed if num_views is between 15 (inclusive) and 10 (exclusive). Feel free to change the variables medium and num_views to see how the control structure respond. In both cases, the existing code should be extended in the else if statement. No existing code should be modified.

##Code

```{r}

# Variables related to your last day of recordings
medium <- "LinkedIn"
num_views <- 14

# Control structure for medium
if (medium == "LinkedIn") {
  print("Showing LinkedIn information")
} else if (medium == "Facebook") {
  # Add code to print correct string when condition is TRUE
  print("Showing Facebook information")
} else {
  print("Unknown medium")
}

```


---
title: "IntermediateR_Functions"
author: "Sudha"
date: "January 11, 2018"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

#### Intermediate R - Functions

##Notes
Function documentation

Before even thinking of using an R function, you should clarify which arguments it expects. All the relevant details such as a description, usage, and arguments can be found in the documentation. To consult the documentation on the sample() function, for example, you can use one of following R commands:

help(sample)
?sample
If you execute these commands in the console of the DataCamp interface, you'll be redirected to www.rdocumentation.org.

A quick hack to see the arguments of the sample() function is the args() function. Try it out in the console:

args(sample)
In the next exercises, you'll be learning how to use the mean() function with increasing complexity. The first thing you'll have to do is get acquainted with the mean() function.

##Instructions
Consult the documentation on the mean() function: ?mean or help(mean).
Inspect the arguments of the mean() function using the args() function.

##Code

```{r}
# Consult the documentation on the mean() function
?mean

# Inspect the arguments of the mean() function
args(mean)
```


##Notes
Use a function

The documentation on the mean() function gives us quite some information:

The mean() function computes the arithmetic mean.
The most general method takes multiple arguments: x and ....
The x argument should be a vector containing numeric, logical or time-related information.
Remember that R can match arguments both by position and by name. Can you still remember the difference? You'll find out in this exercise!

Once more, you'll be working with the view counts of your social network profiles for the past 7 days. These are stored in the linkedin and facebook vectors and have already been defined in the editor on the right.

##Instructions
Calculate the average number of views for both linkedin and facebook and assign the result to avg_li and avg_fb, respectively. Experiment with different types of argument matching!
Print out both avg_li and avg_fb.

##Code

```{r}
# The linkedin and facebook vectors have already been created for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)

# Calculate average number of views
avg_li=mean(linkedin)
avg_fb=mean(facebook)


# Inspect avg_li and avg_fb
avg_li
avg_fb
```

##Notes
Use a function (2)

Check the documentation on the mean() function again:

?mean
The Usage section of the documentation includes two versions of the mean() function. The first usage,

mean(x, ...)
is the most general usage of the mean function. The 'Default S3 method', however, is:

mean(x, trim = 0, na.rm = FALSE, ...)
The ... is called the ellipsis. It is a way for R to pass arguments along without the function having to name them explicitly. The ellipsis will be treated in more detail in future courses.

For the remainder of this exercise, just work with the second usage of the mean function. Notice that both trim and na.rm have default values. This makes them optional arguments.

##Instructions
Calculate the mean of the element-wise sum of linkedin and facebook and store the result in a variable avg_sum.
Calculate the mean once more, but this time set the trim argument equal to 0.2 and assign the result to avg_sum_trimmed.
Print out both avg_sum and avg_sum_trimmed; can you spot the difference?

##Code

```{r}
# The linkedin and facebook vectors have already been created for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)

# Calculate the mean of the sum
avg_sum=mean(linkedin+facebook)

# Calculate the trimmed mean of the sum
avg_sum_trimmed= mean(linkedin+facebook,trim=0.2)


# Inspect both new variables
avg_sum
avg_sum_trimmed

```

##Notes
Use a function (3)

In the video, Filip guided you through the example of specifying arguments of the sd() function. The sd() function has an optional argument, na.rm that specified whether or not to remove missing values from the input vector before calculating the standard deviation.

If you've had a good look at the documentation, you'll know by now that the mean() function also has this argument, na.rm, and it does the exact same thing. By default, it is set to FALSE, as the Usage of the default S3 method shows:

mean(x, trim = 0, na.rm = FALSE, ...)
Let's see what happens if your vectors linkedin and facebook contain missing values (NA).

##Instructions
Calculate the average number of LinkedIn profile views, without specifying any optional arguments. Simply print the result to the console.
Calculate the average number of LinkedIn profile views, but this time tell R to strip missing values from the input vector.

##Code

```{r}
# The linkedin and facebook vectors have already been created for you
linkedin <- c(16, 9, 13, 5, NA, 17, 14)
facebook <- c(17, NA, 5, 16, 8, 13, 14)

# Basic average of linkedin
mean(linkedin)

# Advanced average of linkedin
mean(linkedin,na.rm=TRUE)

```

##Notes
Functions inside functions

You already know that R functions return objects that you can then use somewhere else. This makes it easy to use functions inside functions, as you've seen before:

speed <- 31
print(paste("Your speed is", speed))
Notice that both the print() and paste() functions use the ellipsis - ... - as an argument. Can you figure out how they're used?

##Instructions
Use abs() on linkedin - facebook to get the absolute differences between the daily Linkedin and Facebook profile views. Next, use this function call inside mean() to calculate the Mean Absolute Deviation. In the mean() call, make sure to specify na.rm to treat missing values correctly!

##Code

```{r}
# The linkedin and facebook vectors have already been created for you
linkedin <- c(16, 9, 13, 5, NA, 17, 14)
facebook <- c(17, NA, 5, 16, 8, 13, 14)

# Calculate the mean absolute deviation
mean(abs(linkedin-facebook),na.rm=TRUE)
```

##Notes
Write your own function

Wow, things are getting serious... you're about to write your own function! Before you have a go at it, have a look at the following function template:

my_fun <- function(arg1, arg2) {
  body
}
Notice that this recipe uses the assignment operator (<-) just as if you were assigning a vector to a variable for example. This is not a coincidence. Creating a function in R basically is the assignment of a function object to a variable! In the recipe above, you're creating a new R variable my_fun, that becomes available in the workspace as soon as you execute the definition. From then on, you can use the my_fun as a function.

##Instructions
Create a function pow_two(): it takes one argument and returns that number squared (that number times itself).
Call this newly defined function with 12 as input.
Next, create a function sum_abs(), that takes two arguments and returns the sum of the absolute values of both arguments.
Finally, call the function sum_abs() with arguments -2 and 3 afterwards.

##Code

```{r}
# Create a function pow_two()
pow_two = function(x)
{
  return(x*x)
}


# Use the function
pow_two(12)

# Create a function sum_abs()
sum_abs =function(a,b)
{
  return(sum(abs(a),abs(b)))
}

# Use the function
sum_abs(-2,3)

```


##Notes
Write your own function (2)

There are situations in which your function does not require an input. Let's say you want to write a function that gives us the random outcome of throwing a fair die:

throw_die <- function() {
  number <- sample(1:6, size = 1)
  number
}

throw_die()
Up to you to code a function that doesn't take any arguments!

##Instructions
Define a function, hello(). It prints out "Hi there!" and returns TRUE. It has no arguments.
Call the function hello(), without specifying arguments of course.

##Code

```{r}
# Define the function hello()
hello =function()
{
  print("Hi there!")
  return(TRUE)
}

# Call the function hello()
hello()

```

##Notes
Write your own function (3)

Do you still remember the difference between an argument with and without default values? Have another look at the sd() function by typing ?sd in the console. The usage section shows the following information:

sd(x, na.rm = FALSE)
This tells us that x has to be defined for the sd() function to be called correctly, however, na.rm already has a default value. Not specifying this argument won't cause an error.

You can define default argument values in your own R functions as well. You can use the following recipe to do so:

my_fun <- function(arg1, arg2 = val2) {
  body
}
The editor on the right already includes an extended version of the pow_two() function from before. Can you finish it?

##Instructions
Add an optional argument, named print_info, that is TRUE by default.
Wrap an if construct around the print() function: this function should only be executed if print_info is TRUE.
Feel free to experiment with the pow_two() function you've just coded.

##Code

```{r}
# Finish the pow_two() function
pow_two <- function(x,print_info=TRUE) {
  y <- x ^ 2
  if(print_info==TRUE)
  {
  print(paste(x, "to the power two equals", y))
  }
  return(y)
}

##calling different versions
pow_two(2,TRUE)
pow_two(3,FALSE)
pow_two(12)

```


##Instructions
